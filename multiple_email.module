<?php
// $Id$

/**
 * @file
 * Add the ability to attach multiple email address to a given user.
 */

/**
 * Implements hook_field_info().
 */
function multiple_email_field_info() {
  return array(
    'multiple_email' => array(
      'label' => t('Email address'),
      'default_widget' => 'multiple_email_hidden',
      'default_formatter' => 'hidden',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function multiple_email_field_is_empty($item, $field) {
  return empty($item['mail']);
}

/**
 * Implements hook_field_widget_info().
 */
function multiple_email_field_widget_info() {
  return array(
    'multiple_email_hidden' => array(
      'label' => t('Hidden email'),
      'field types' => array('multiple_email'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function multiple_email_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = $element;
    $elements[$delta]['#weight'] = $delta;
    $elements[$delta]['mail']['#value'] = $item['mail'];
    $elements[$delta]['mail']['#type'] = 'value';
  }
  return $elements;
}

/**
 * Implements hook_field_presave().
 */
function multiple_email_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'multiple_email') {
    $item = end($items);
    $old_email = $item['mail'];
    if ($old_email != $entity->mail) {
      $items[] = array('mail' => $entity->mail);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function multiple_email_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
    $form['#validate'][] = 'multiple_email_user_account_form_validate';
  }
  elseif ($form_id == 'user_pass_form') {
    $form['#validate'] = array('multiple_email_user_pass_validate');
    $form['#submit'] = array('multiple_email_user_pass_submit');
  }
}

/**
 * Makes sure users don't take other users previous email addresses.
 */
function multiple_email_user_account_form_validate($form, &$form_state) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->fieldCondition('field_multiple_email', 'mail', $form_state['values']['mail'])
    ->execute();
  if (!empty($result['user'])) {
    $uids = array_keys($result['user']);
    if ($entity->uid != $uids[0]) {
      if ($GLOBALS['user']->uid) {
        form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['mail'])));
      }
      else {
        form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
      }
    }
  }
}

/**
 * Reimplements user_pass_validate() to allow for entering old email addresses.
 */
function multiple_email_user_pass_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);

  // Try to load by email.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', '1')
    ->fieldCondition('field_multiple_email', 'mail', $name)
    ->execute();

  if (!empty($result['user'])) {
    $account = user_load(reset($result['user'])->uid);
  }
  else {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));
  }
}

/**
 * Submit function to send an email to every previous email address.
 */
function multiple_email_user_pass_submit($form, &$form_state) {
  global $language;

  $account = clone $form_state['values']['account'];
  $mails = array($account->mail);
  foreach ($account->field_multiple_email['und'] as $mail) {
    $mails[] = $mail['mail'];
  }
  foreach (array_unique($mails) as $mail) {
    $account->mail = $mail;
    _user_mail_notify('password_reset', $account, $language);
    watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
  }
  drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
  $form_state['redirect'] = 'user';
}
